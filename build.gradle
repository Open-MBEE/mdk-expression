import static javax.xml.ws.Endpoint.publish

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'igomes' at '8/30/16 5:08 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.0'
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.3'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'distribution'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'rebel'

version = humanVersion
String buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : System.currentTimeSeconds()

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    //mavenCentral()
    maven {
        url 'https://cae-artifactory.jpl.nasa.gov/artifactory/ext-release-local'
    }
}

configurations {
    preCompile
}

// In this section you declare the dependencies for your production and test code
dependencies {
    antlr group: 'org.antlr', name: 'antlr4', version: '4.5.3'

	preCompile group: 'gov.nasa.jpl.cae.magicdraw.packages', name: 'cae_md18_4_vendor', version: '1.2', ext: 'zip'

    //compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'build/dependency-cache/extracted', include: ['lib/**/*.jar','plugins/**/*.jar'])
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile group: 'net.sourceforge.jeuclid', name: 'jeuclid-core', version: '3.1.9'
    compile group: 'org.antlr', name: 'antlr4', version: '4.5.3'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
}

task extractDependencies {
    configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        inputs.file artifact.file
        def zipFile = new java.util.zip.ZipFile(artifact.file)
        zipFile.entries().each { entry ->
            if (!entry.isDirectory()) {
                outputs.file 'build/dependency-cache/extracted/' + entry.getName()
            }
        }
    }
    doLast {
        inputs.files.each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
        /*fileTree(dir: 'build/dependency-cache/extracted').each { file ->
            outputs.file file
        }*/
    }
}
compileJava.dependsOn extractDependencies

class PreDist extends DefaultTask {
    String version
    String internalVersion
    String groupId
    String descriptor

    @TaskAction
    public void executeTask() {
    
        project.copy {
            from 'src/main/dist'
            exclude 'template'
            from 'src/main/dist/template'
            into 'build/generated-dist'
        }
        project.copy {
            from project.configurations.compile.resolvedConfiguration.resolvedArtifacts.file
            from 'lib'
            into "build/generated-dist/plugins/${groupId}"
        }
        project.copy {
            from project.jar
            into "build/generated-dist/plugins/${groupId}"
        }

        String pluginLibraries = ''
        project.fileTree(dir: "build/generated-dist/plugins/${groupId}", include: '**/*.jar').each { file ->
            pluginLibraries += '\t\t<library name=\"' + file.absolutePath.replaceAll(~/.*build\/generated-dist\/plugins\/${groupId}\//, '') + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/plugins/${groupId}/plugin.xml"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + pluginLibraries) }
            filter { String line -> line.replace('${human.version}', version) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into "build/generated-dist/plugins/${groupId}"
        }

        String descriptorFiles = ''
        project.fileTree(dir: 'build/generated-dist').each { file ->
            String relativePath = file.absolutePath.replaceAll(/.*build\/generated-dist\//, '');
            descriptorFiles += '\t\t<file from=\"' + relativePath + '\" to=\"' + relativePath + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/data/resourcemanager/${descriptor}"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + descriptorFiles) }
            filter { String line -> line.replace('${human.version}', version) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into 'build/generated-dist/data/resourcemanager'
        }
    }
}

task preDist(type: PreDist, dependsOn: jar) {
    version = humanVersion
    internalVersion = buildNumber
    groupId = 'gov.nasa.jpl.mbee.mdk.expression'
    descriptor = 'MDR_Plugin_MDK_Expression_75689_descriptor.xml'
}

distributions {
    main {
        contents {
            exclude 'template'
            from 'build/generated-dist'
        }
    }
}

assembleDist.dependsOn.remove distTar
tasks.remove(distTar)

distZip {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    eachFile { file ->
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
}

distZip.dependsOn preDist

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    // Reference to Gradle publications defined in the build script.
    // This is how we tell the Artifactory Plugin which artifacts should be
    // published to Artifactory.
    publications {
        mavenJava(MavenPublication) {
            groupId 'gov.nasa.jpl.cae.magicdraw.plugins.mdk.expression'
            artifactId 'mdk-expression'
            version humanVersion

            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            artifact distZip {
                classifier "plugin"
            }
        }
    }
}

artifactory {
    contextUrl = 'https://cae-artifactory.jpl.nasa.gov/artifactory/'
    publish {
        repository {
            repoKey = 'plugins-' + (version.endsWith('SNAPSHOT') ? 'snapshot' : 'release') + '-local' // The Artifactory repository key to publish to
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            //properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}

artifactoryPublish.dependsOn distZip

installDist {
  installDist {
    destinationDir = file('build/plugin')
    doLast {
        copy {
            fileMode 0755
            from 'build/dependency-cache/extracted'
            from 'build/plugin'
            into 'build/install'
        	}
    	} 
    }
    
}



installDist.dependsOn distZip

task runApp(type: JavaExec) {

    classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx4000M', '-Xss1024M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true']
    // arguments to pass to the application
    args 'DEVELOPER'
    
    
}

runApp.dependsOn installDist
runApp.dependsOn generateRebel
