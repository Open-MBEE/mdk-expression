grammar ArithmeticAsciiMath;

@lexer::header {
    package gov.nasa.jpl.mbee.mdk.expression.antlr.generated;
}

@parser::header {
    package gov.nasa.jpl.mbee.mdk.expression.antlr.generated;
}

/*Parsing ASCII math expressions with the following grammar
v ::= [A-Za-z] | greek letters | numbers | other constant symbols
u ::= sqrt | text | bb | other unary symbols for font commands
b ::= frac | root | stackrel         binary symbols
l ::= ( | [ | { | (: | {:            left brackets
r ::= ) | ] | } | :) | :}            right brackets
S ::= v | lEr | uS | bSS             Simple expression
I ::= S_S | S^S | S_S^S | S          Intermediate expression
E ::= IE | I/I                       Expression
Each terminal symbol is translated into a corresponding mathml node.*/

// Expression	
expression : 
    intexpression expression #ieExp 
   | intexpression '/' intexpression  #ifraciExp
   ;


intexpression : 
	simple'_'simple  #s1Exp
	| simple'^'simple  #s2Exp
	| simple'_'simple'^'simple  #s3Exp
	| simple  #s4Exp
	;

simple : //simple expression
 variable //#const 
 | lbracket expression rbracket    //#parExp 
 | unary simple* 		//#unaryExp
 | binary simple simple* 	//#binaryExp
 //| variable '!' #factorialExp
 ;
 
variable: 
  '-' Int #negIntNumConst
  | '-' Real #negIntNumConst
  | Variable #varConst
  | Int  #intNumConst
  | Real #realNumConst
  | GreekLetters #glConst //| other constant symbols (see below)
  | OperationSymbol #operationConst;

unary ://unary symbols
   'sqrt' | 'text' | 'bb' |'tilde'  |'f'  |'g'  
   
    //standard function
   | 'sin' |'cos'  |'tan'  |'sinh'  |'cosh' |'tanh' |'cot' |'sec' |'csc' |'arcsin' |'arccos' |'arctan' |'coth' |'sech' |'csch'
    |'exp' |'abs'|'norm' |'floor' |'ceil' |'log' |'ln' |'det'| 'dim'| 'lim'| 'mod'| 'gcd'| 'lcm'| 'min'| 'max'
    //
 |'gcd' |'lcm' | 'hat'|'bar'  |'vec' |'dot' |'ddot' |'ul' |'ubrace'|'obrace' |'cancel' |'bb' |'mathbf' |'sf' |'mathsf'
 |'bbb' |'mathbb'|'cc' |'mathcal'|'tt'|'mathtt' |'fr' |'mathfrak' ;
 
/*  'sqrt' #sqrt | 'text' #text | 'bb' #bb |'tilde' #tilde |'f' #f |'g' #g | 'sin'	#sin |'cos' #cos |'tan' #tan |'sinh' #sinh |'cosh' #cosh|'tanh' #tanh|'cot' #cot|'sec' #sec|'csc' #csc|'arcsin' #arcsin|'arccos' #arccos|'arctan' #arctan|'coth' #coth|'sech' #sech|'csch' #csch|'exp' #exp|'abs' #abs|'norm' #norm|'floor' #floor|'ceil' #ceil|'log' #log|'ln' #ln|'det' #det
 |'gcd' #gcd|'lcm' #lcm| 'sqrt' #sqrt| 'hat' #hat|'bar' #bar |'vec' #vec|'dot' #dot|'ddot' #ddot|'ul' #ul|'ubrace' #ubrace|'obrace' #obrace|'cancel'#cancel|'bb' #bb|'mathbf'#mathbf|'sf'#sf|'mathsf' #mathsf
 |'bbb' #bbb|'mathbb' #mathbb|'cc' #cc|'mathcal' #mathcal|'tt' #tt|'mathtt' #mathtt|'fr' #fr|'mathfrak' #mathfrak;
*/
 
binary :// binary symbols
 'frac' | 'root'  | 'stackrel' | 'overset' | 'underset' | 'color' |
 '=' |
'!='|
'<'|
'>'|
'<='|
'>='|
'-<'|
'>-'|
'in'|
'!in'|
'sub'|
'sup'|
'sube'|
'supe'|
'-='|
'~='|
'~~'|
'prop';

lbracket : '(' | '[' | '{' | '(:' | '{:';   //leftbrackets       
rbracket : ')' | ']' | '}' | ':)' | ':}';//          right brackets

OperationSymbol :
	'/'|','|'+'|'-'|'*'|'**'|'***'|'//'|'\\'|'xx'|'-:'|'@'; //wip

PLUS
   : '+'
   ;


MINUS
   : '-'
   ;

COM				//added this
   : ','
   ;

Int
	: DIGIT +;

Real
   : DIGIT + (POINT DIGIT +)? //removed minus
   ;

Variable
   : LETTER (LETTER | DIGIT)* 
   ;

GreekLetters
	:
	'alpha'|'beta'|'delta'|'Delta'|'epsilon'|'gamma'|'Gamma'|'kappa'|'lambda'|'Lambda'|'omega'|'phi'|'Phi'|'Pi'|'psi'|'Psi'|'rho'|'sigma'|'Sigma'|'tau'|'theta'|'Theta'|'xi'|'Xi'|'zeta';
	
LETTER
   : ('a' .. 'z') | ('A' .. 'Z')
   ;  
   
DIGIT
   : ('0' .. '9')
   ;

POINT
   : '.'
   ;   



 /* 

   ; */