grammar ArithmeticBinary;

@lexer::header {
    package gov.nasa.jpl.mbee.mdk.expression.antlr.generated;
}

@parser::header {
    package gov.nasa.jpl.mbee.mdk.expression.antlr.generated;
}

//*****************PARSER RULES******************

expression
   : 
   expression (EQ) expression #eqExp		//added this
  	
   | lbrackets expression rbrackets #parExp //close to original but modified [a,b]
   | lbrackets expression (comma expression)+ rbrackets #par2Exp
   | Variable lbrackets expression (comma expression)* rbrackets #funExp
   | literal	#litExp
   | MINUS literal #negLitExp
   | SUB lbrackets expression rbrackets SUPER lbrackets expression rbrackets #subsuperExp
   | unary expression+ 	#unaryExp //(ie., sin, cos,...) close to original but modified
   | unary2  expression+ #unary2Exp //(ie., lim)
   | ('f'|'g') lbrackets expression rbrackets  #fExp //f(x)dx 
   | ('f'|'g') lbrackets expression rbrackets literal* #fExp //f(x)dx
   | expression (SUPER) expression #binaryExp1
   | expression (TIMES|DIV) expression	#binaryExp2
   | expression (PLUS|MINUS) expression #binaryExp3
  
   | MINUS expression	#negExp

   | expression (SUB|DSL|ARR) expression* #binaryExp1
   


   | (OVERSET|UNDERSET) lbrackets expression rbrackets #over_or_under_br //overset(a)=
   | OVERSET lbrackets expression rbrackets UNDERSET lbrackets expression rbrackets lbrackets expression rbrackets #over_and_under_br //overset(frac(a)(b))underset(h)=
   | SUB expression #unarySubExp
   | SUPER expression #unarySuperExp
   | f_post_br2 lbrackets literal rbrackets lbrackets literal rbrackets #fpostbr2
   
   
   | 'd/dx'expression #derivativeOperatorExp
   | expression '!' #factorialExp
   ;
 /* original
   expression
      : LPAREN expression RPAREN #parExp
      | literal	#litExp
      | MINUS literal #negLitExp
      | unary LPAREN expression RPAREN	#unaryExp
      | Variable LPAREN expression (COM expression)* RPAREN #funExp	//added this
      | expression (POW) expression #binaryExp1
      | expression (TIMES|DIV) expression	#binaryExp2
      | expression (PLUS|MINUS) expression #binaryExp3
      | expression (EQ|GT|LT|EGT|ELT) expression #eqExp		//added this
      | MINUS expression	#negExp
      ;
*/
literal
   : Number	//	#num
   | Variable//	#var
   ;	

Number
   : DIGIT + (POINT DIGIT +)? //removed minus
   ;

Variable
   : LETTER (LETTER | DIGIT)*
   ;

unary ://unary symbols
   'sin' |'cos'  |'tan'  |'sinh'  |'cosh' |'tanh' |'cot' |'sec' |'csc' |'arcsin' |'arccos' |'arctan' |'coth' |'sech' |'csch'|
   'sqrt' | 'grad';

unary2: //not supported by prefix
    'tilde'
    |'exp' |'abs'|'norm' |'floor' |'ceil' |'log' |'ln' |'det'| 'dim'| 'lim'| 'mod'| 'gcd'| 'lcm'| 'min'| 'max'| 'int'
     |'gcd' |'lcm' | 'hat'|'bar'  |'vec' |'dot' |'ddot' |'ul' |'ubrace'|'obrace' |'cancel' |'bb' |'mathbf' |'sf' |'mathsf'
    |'bbb' |'mathbb'|'cc' |'mathcal'|'tt'|'mathtt' |'fr' |'mathfrak' ;
 
unary_font: // unary symbols for font command
     'bb' |'bbb' | 'cc'| 'tt' | 'fr'| 'sf' | 'text';

f_post_br2 :// requires 2 brackets (ie., frac(5)(6), color(blue)(x))
 'frac'  | 'root'  | 'stackrel' | 'overset' | 'underset' | 'color'| 'f' |'g';



OVERSET: 'oveset';
UNDERSET: 'underset';
    
    
//*****************TOKEN RULES*******************



lbrackets : '(' #lcbracket | '[' #lcbracket | '{' #lcbracket | '(:' #lcbracket | '{:' #lcbracket;  //leftbrackets       
rbrackets : ')' #rcbracket| ']' #rcbracket | '}' #rcbracket | ':)' #rcbracket | ':}' #rcbracket;//          right brackets

DSL: '//';

ARR:'->';

PLUS
   : '+'
   ;


MINUS
   : '-'
   ;


TIMES
   : '*'
   ;


DIV
   : '/'
   ;


GT
   : '>'
   ;


LT
   : '<'
   ;

EGT				//added this
   : '>='		
   ;
   
ELT
   : '<='
   ;

EQ
   : '='
   ;


POINT
   : '.'
   ;


SUPER
   : '^'
   ;
SUB
	: '_'
	;   

comma 		//added this
   : ',' #com 
   ;


LETTER
   : ('a' .. 'z') | ('A' .. 'Z')
   ;


DIGIT
   : ('0' .. '9')
   ;


WS
   : [ \r\n\t] + -> channel (HIDDEN)
   ;