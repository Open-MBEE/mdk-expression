package gov.nasa.jpl.mbee.mdk.expression;

import gov.nasa.jpl.mbee.mdk.expression.antlr.generated.ArithmeticBinaryLexer;
import gov.nasa.jpl.mbee.mdk.expression.antlr.generated.ArithmeticBinaryParser;
import org.antlr.v4.gui.TreeViewer;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import javax.swing.*;
import java.util.Arrays;

public class AsciiMathML2Tree {

    private String expression;
    private ArithmeticBinaryParser parser;
    private ParseTree tree;

    public AsciiMathML2Tree(String expression){
        this.expression = expression;
    }

    public void setExpression(String expression){
        this.expression = expression;
    }

    private void pParse(){
        ANTLRInputStream input = new ANTLRInputStream(expression);
        ArithmeticBinaryLexer lexer = new ArithmeticBinaryLexer(input); //HelloLexer is generated by own grammar
        CommonTokenStream tokens = new CommonTokenStream(lexer); //create CommonTokenString
        parser = new ArithmeticBinaryParser(tokens); //HelloParser is generated by own grammar
        tree = parser.expression();
    }

    public ParseTree parse(){
        pParse();
        return tree;
    }

    public void showTree(){
        if(tree == null){pParse();}
        JFrame frame = new JFrame("AsciiMathML Expression Tree");
        JPanel panel = new JPanel();
        TreeViewer viewr = new TreeViewer(Arrays.asList(parser.getRuleNames()),tree);
        viewr.setScale(1.5);//scale a little
        panel.add(viewr);
        frame.add(panel);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(frame.getPreferredSize().width + 80, frame.getPreferredSize().height + 60);
        frame.setVisible(true);
    }

}
