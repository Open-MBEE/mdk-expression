package gov.nasa.jpl.mbee.mdk.expression;

import gov.nasa.jpl.mbee.mdk.expression.antlr.generated.ArithmeticBinaryLexer;
import gov.nasa.jpl.mbee.mdk.expression.antlr.generated.ArithmeticBinaryParser;
import org.antlr.v4.gui.TreeViewer;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.ValueSpecification;

import javax.swing.*;
import java.util.Arrays;

public class AsciiMathML2Tree {

    private String expression;
    private ArithmeticBinaryParser parser;
    private ParseTree tree;

    public AsciiMathML2Tree(String expression){
        this.expression = expression;
    }

    public void setExpression(String expression){
        this.expression = expression;
    }

    private void pParse(){
    	  ANTLRInputStream input = new ANTLRInputStream(expression);
          ArithmeticBinaryLexer lexer = new ArithmeticBinaryLexer(input); //HelloLexer is generated by own grammar
          CommonTokenStream tokens = new CommonTokenStream(lexer); //create CommonTokenString
          parser = new ArithmeticBinaryParser(tokens); //HelloParser is generated by own grammar
          tree = parser.expression();
    }

    public ParseTree parse(){
        pParse();
        return tree;
    }

    public void showTree(){
        if(tree == null){pParse();}
        JFrame frame = new JFrame("AsciiMathML Expression Tree");
        JPanel panel = new JPanel();
        TreeViewer viewr = new TreeViewer(Arrays.asList(parser.getRuleNames()),tree);
        viewr.setScale(1.5);//scale a little
        panel.add(viewr);
        frame.add(panel);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(frame.getPreferredSize().width + 80, frame.getPreferredSize().height + 60);
        frame.setVisible(true);
    }
    public static void main(String[] args){
    	String textExpression = "a+b";
    	AsciiMathML2Tree a2t = new AsciiMathML2Tree(textExpression);
		//AsciiMathML2Tree2 a2t = new AsciiMathML2Tree2(textExpression);
		ParseTree pt = a2t.parse();
		a2t.showTree();	//shows the LISP tree generated by an
		
		Test t = a2t.new Test();
		t.parse(pt);
		
		/*
		Tree2UMLExpression 	t2uml = new Tree2UMLExpression_InfixString(controller, pt, originalvs);
		vs = t2uml.parse();	
			
		if(!t2uml.getError()){
			// debug 
			a2t.showTree();	//shows the LISP tree generated by antlr
    	*/
    	
    }
    public class Test {
    	
    	public Test(){}
    	public void parse(ParseTree pt)
    	{
    		traverse(pt, 0);
    	}
	    public void traverse(ParseTree pt, int depth){
	    	System.out.println("num child: " + pt.getChildCount());
	    	String ds = "";
			for ( int i = 0; i < depth; i++){
				ds = ds + "\t";
			}
			++depth;
			for ( int i = 0; i < pt.getChildCount(); i++) {
				System.out.println(ds + "======" + i + " of " + pt.getChildCount() + " =====");
				System.out.println(pt.getChild(i) + " " + pt.getChild(i).getClass().getName());
				traverse(pt.getChild(i), depth);
			}
	    }
    }

}
